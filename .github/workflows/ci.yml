# File: .github/workflows/ci.yml

name: CI Pipeline for Thought-to-Note Lite

# Trigger the workflow on the following events:
on:
  # Trigger on pushes to main, develop, and any feature branches
  push:
    branches:
      - main
      - develop
      - 'feature/**'
      - 'bugfix/**'
      - 'hotfix/**'
    tags:
      - 'v*.*.*'  # Optional: Trigger on version tags like v1.0.0

  # Trigger on pull requests targeting main, develop, and any feature branches
  pull_request:
    branches:
      - main
      - develop
      - 'feature/**'
      - 'bugfix/**'
      - 'hotfix/**'

  # Allow manual triggering of the workflow
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    # Define PostgreSQL service using GitHub Actions services
    services:
      postgres:
        image: postgres:16
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: thoughttnotelitedb
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        # Corrected options field to avoid newline characters
        options: "--health-cmd=\"pg_isready -U postgres\" --health-interval=10s --health-timeout=5s --health-retries=5"

    steps:
      # 1. Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Set up Java environment (Java 21)
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # 3. Cache Maven dependencies to speed up the build
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # 4. Install Maven dependencies without running tests
      - name: Install Dependencies
        run: mvn install -DskipTests

      # 5. Wait for PostgreSQL to be ready
      - name: Wait for PostgreSQL to be ready
        run: |
          for i in {1..30}; do
            if docker exec $(docker ps -q -f ancestor=postgres:16) pg_isready -U postgres; then
              echo "PostgreSQL is ready"
              exit 0
            fi
            echo "Waiting for PostgreSQL..."
            sleep 1
          done
          echo "PostgreSQL did not become ready in time."
          exit 1

      # 6. Run Maven tests
      - name: Run Tests
        run: mvn test

      # 7. (Optional) Collect and upload test reports
      # Uncomment the following steps if you wish to collect test reports
      # - name: Upload Test Results
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: test-results
      #     path: target/surefire-reports/